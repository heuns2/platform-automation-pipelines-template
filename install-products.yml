resources:

  - name: platform-automation-tasks-git
    type: git
    source:
      private_key: ((git.private_key))
      uri: ((git.platform_automation_tasks.uri))
      branch: master

  - name: platform-automation-tasks
    type: s3
    source:
      endpoint: ((s3.endpoint))
      access_key_id: ((s3.access_key_id))
      secret_access_key: ((s3.secret_access_key))
      region_name: ((s3.region_name))
      bucket: ((s3.buckets.platform_automation))
      regexp: .*tasks-(.*).zip
      skip_ssl_verification: true


  - name: platform-automation-image
    type: s3
    source:
      endpoint: ((s3.endpoint))
      access_key_id: ((s3.access_key_id))
      secret_access_key: ((s3.secret_access_key))
      region_name: ((s3.region_name))
      bucket: ((s3.buckets.platform_automation))
      regexp: .*image-(.*).tgz
      skip_ssl_verification: true

  - name: installation
    type: s3
    source:
      endpoint: ((s3.endpoint))
      access_key_id: ((s3.access_key_id))
      secret_access_key: ((s3.secret_access_key))
      region_name: ((s3.region_name))
      bucket: ((s3.buckets.installation))
      regexp: installation-(.*).zip
      skip_ssl_verification: true

  - name: opsman-image
    type: s3
    source:
      endpoint: ((s3.endpoint))
      access_key_id: ((s3.access_key_id))
      bucket: ((s3.buckets.pivnet_products))
      region_name: ((s3.region_name))
      secret_access_key: ((s3.secret_access_key))
      regexp: ((opsman_image_s3_versioned_regexp)) # vsphere ex: pcf-vsphere-(.*).ova
      skip_ssl_verification: true

  - name: pas-stemcell
    type: s3
    source:
      endpoint: ((s3.endpoint))
      access_key_id: ((s3.access_key_id))
      secret_access_key: ((s3.secret_access_key))
      region_name: ((s3.region_name))
      bucket: ((s3.buckets.pivnet_products))
      regexp: pas-stemcell/bosh-stemcell-(.*)-vsphere.*\.tgz
      skip_ssl_verification: true

  - name: pas-product
    type: s3
    source:
      endpoint: ((s3.endpoint))
      access_key_id: ((s3.access_key_id))
      secret_access_key: ((s3.secret_access_key))
      region_name: ((s3.region_name))
      bucket: ((s3.buckets.pivnet_products))
      regexp: cf-(.*).pivotal
      skip_ssl_verification: true

  - name: healthwatch-stemcell
    type: s3
    source:
      endpoint: ((s3.endpoint))
      access_key_id: ((s3.access_key_id))
      secret_access_key: ((s3.secret_access_key))
      region_name: ((s3.region_name))
      bucket: ((s3.buckets.pivnet_products))
      regexp: healthwatch-stemcell/bosh-stemcell-(.*)-vsphere.*\.tgz
      skip_ssl_verification: true

  - name: healthwatch-product
    type: s3
    source:
      endpoint: ((s3.endpoint))
      access_key_id: ((s3.access_key_id))
      secret_access_key: ((s3.secret_access_key))
      region_name: ((s3.region_name))
      bucket: ((s3.buckets.pivnet_products))
      regexp: p-healthwatch-(.*).pivotal
      skip_ssl_verification: true

  # configurations
  - name: configuration
    type: git
    source:
      private_key: ((git.private_key))
      uri: ((git.configuration.uri))
      branch: master

  - name: variable
    type: git
    source:
      private_key: ((git.private_key))
      uri: ((git.variable.uri))
      branch: master

  # triggers used to have jobs do something in a timely manner
  - name: one-time-trigger
    type: time
    source:
      interval: 999999h

  - name: daily-trigger
    type: time
    source:
      interval: 24h

# reusable stuff
credhub-interpolate: &credhub-interpolate
  image: platform-automation-image
  file: platform-automation-tasks-git/tasks/credhub-interpolate.yml
  input_mapping:
    files: configuration
  output_mapping:
    interpolated-files: configuration-interpolated # to preserve the configuration to have .git after interpolate.
  params:
    CREDHUB_SERVER: ((credhub.server))
    CREDHUB_CA_CERT: ((credhub.ca_cert))
    CREDHUB_CLIENT: ((credhub.client))
    CREDHUB_SECRET: ((credhub.secret))
    PREFIX: /concourse/((foundation))
    INTERPOLATION_PATH: ((credhub.interpolate_folders))



jobs:
  - name: install-opsman
    serial: true
    serial_groups: [ install ]
    plan:
      - aggregate:
          - get: platform-automation-image
            params:
              unpack: true
          - get: one-time-trigger
            trigger: false
          - get: platform-automation-tasks
            params:
              unpack: true
          - get: platform-automation-tasks-git #temporary
          - get: opsman-image
          - get: configuration
          - get: variable

      - task: credhub-interpolate #temporary
        <<: *credhub-interpolate
              
      - task: create-vm
        image: platform-automation-image
        file: platform-automation-tasks/tasks/create-vm.yml
        input_mapping:
          image: opsman-image
          state: configuration-interpolated
          config: configuration-interpolated
          vars: variable
        params:
          #VARS_FILES: vars/((foundation))/vars/opsman-vars.yml
          STATE_FILE: ((foundation))/state/state.yml
          OPSMAN_CONFIG_FILE: ((foundation))/config/opsman-2.4.yml
        ensure: &make-state-commit
          do:
            - task: make-commit
              image: platform-automation-image
              file: platform-automation-tasks/tasks/make-git-commit.yml
              input_mapping:
                repository: configuration
                file-source: generated-state
              output_mapping:
                repository-commit: configuration-commit
              params:
                FILE_SOURCE_PATH: state.yml
                FILE_DESTINATION_PATH: ((foundation))/state/state.yml
                GIT_AUTHOR_EMAIL: "pcf-pipeline-bot@example.com"
                GIT_AUTHOR_NAME: "Platform Automation Bot"
                COMMIT_MESSAGE: 'Update state file'
            - put: configuration
              params:
                repository: configuration-commit
                merge: true 
      - task: configure-authentication
        image: platform-automation-image
        file: platform-automation-tasks/tasks/configure-authentication.yml
        attempts: 10
        input_mapping:
          env: configuration-interpolated
          config: configuration-interpolated
        params:
          ENV_FILE: ((foundation))/env/env.yml
          AUTH_CONFIG_FILE: ((foundation))/config/auth.yml
      - task: configure-director
        image: platform-automation-image
        file: platform-automation-tasks/tasks/configure-director.yml
        input_mapping:
          env: configuration-interpolated
          config: configuration-interpolated
          vars: variable
        params:
          #VARS_FILES: vars/((foundation))/vars/director-vars.yml
          ENV_FILE: ((foundation))/env/env.yml
          DIRECTOR_CONFIG_FILE: ((foundation))/config/director-2.4.yml
      - task: apply-director-changes
        image: platform-automation-image
        file: platform-automation-tasks/tasks/apply-director-changes.yml
        input_mapping:
          env: configuration-interpolated
        params:
          ENV_FILE: ((foundation))/env/env.yml


  - name: install-director
    serial: true
    serial_groups: [ install ]
    plan:
      - aggregate:
          - get: platform-automation-image
            params:
              unpack: true
          - get: one-time-trigger
            trigger: false
          - get: platform-automation-tasks
            params:
              unpack: true
          - get: platform-automation-tasks-git #temporary
          - get: configuration
          - get: variable

      - task: credhub-interpolate #temporary
        <<: *credhub-interpolate
           
      - task: configure-authentication
        image: platform-automation-image
        file: platform-automation-tasks/tasks/configure-authentication.yml
        attempts: 10
        input_mapping:
          env: configuration-interpolated
          config: configuration-interpolated
        params:
          ENV_FILE: ((foundation))/env/env.yml
          AUTH_CONFIG_FILE: ((foundation))/config/auth.yml
      - task: configure-director
        image: platform-automation-image
        file: platform-automation-tasks/tasks/configure-director.yml
        input_mapping:
          env: configuration-interpolated
          config: configuration-interpolated
          vars: variable
        params:
          #VARS_FILES: vars/((foundation))/vars/director-vars.yml
          ENV_FILE: ((foundation))/env/env.yml
          DIRECTOR_CONFIG_FILE: ((foundation))/config/director-2.4.yml
      - task: apply-director-changes
        image: platform-automation-image
        file: platform-automation-tasks/tasks/apply-director-changes.yml
        input_mapping:
          env: configuration-interpolated
        params:
          ENV_FILE: ((foundation))/env/env.yml



  - name: staged-director-config
    serial: true
    plan:
      - aggregate:
          - get: platform-automation-tasks
            params: {unpack: true}
          - get: platform-automation-image
            params: {unpack: true}
          - get: configuration

          - get: platform-automation-tasks-git #temporary
      - task: credhub-interpolate #temporary
        <<: *credhub-interpolate

      - task: staged-director-config
        image: platform-automation-image
        file: platform-automation-tasks-git/tasks/staged-director-config.yml
        input_mapping:
          env: configuration-interpolated
        params:
          ENV_FILE: ((foundation))/env/env.yml

        ensure: &make-state-commit
          do:
            - task: make-commit
              image: platform-automation-image
              file: platform-automation-tasks/tasks/make-git-commit.yml
              input_mapping:
                repository: configuration
                file-source: generated-config
              output_mapping:
                repository-commit: configuration
              params:
                FILE_SOURCE_PATH: director.yml
                FILE_DESTINATION_PATH: ((foundation))/generated-config/director.yml
                GIT_AUTHOR_EMAIL: "pcf-pipeline-bot@example.com"
                GIT_AUTHOR_NAME: "Platform Automation Bot"
                COMMIT_MESSAGE: 'director.yml'
            - put: configuration
              params:
                repository: configuration
                merge: true

  - name: export-installation
    serial: true
    plan:
      - aggregate:
          - get: daily-trigger
            trigger: false
          - get: platform-automation-image
            params:
              unpack: true
          - get: platform-automation-tasks
            params:
              unpack: true
          - get: configuration
          - get: variable

          - get: platform-automation-tasks-git #temporary
      - task: credhub-interpolate #temporary
        <<: *credhub-interpolate

      - task: export-installation
        image: platform-automation-image
        file: platform-automation-tasks/tasks/export-installation.yml
        input_mapping:
          env: configuration-interpolated
        params:
          ENV_FILE: ((foundation))/env/env.yml
          INSTALLATION_FILE: installation-$timestamp.zip
      - put: installation
        params:
          file: installation/installation*.zip

  - name: upgrade-opsman
    serial: true
    serial_groups: [ install ]
    plan:
      - aggregate:
          - get: one-time-trigger
            passed: [ install-opsman ]
          - get: platform-automation-image
            params:
              unpack: true
            trigger: false
          - get: platform-automation-tasks
            params:
              unpack: true
          - get: opsman-image
          - get: installation
            passed: [ export-installation ]
          - get: configuration
          - get: variable

          - get: platform-automation-tasks-git #temporary
      - task: credhub-interpolate #temporary
        <<: *credhub-interpolate

      - task: upgrade-opsman
        image: platform-automation-image
        file: platform-automation-tasks/tasks/upgrade-opsman.yml
        input_mapping:
          image: opsman-image
          state: configuration-interpolated
          config: configuration-interpolated
          env: configuration-interpolated
          vars: variable
        params:
          VARS_FILES: vars/((foundation))/vars/opsman-vars.yml
          ENV_FILE: ((foundation))/env/env.yml
          OPSMAN_CONFIG_FILE: ((foundation))/config/opsman.yml
          STATE_FILE: ((foundation))/state/state.yml
        ensure: *make-state-commit
      - task: apply-director-changes
        image: platform-automation-image
        file: platform-automation-tasks/tasks/apply-director-changes.yml
        input_mapping:
          env: configuration
        params:
          ENV_FILE: ((foundation))/env/env.yml

  - name: upload-and-stage-pas
    serial: true
    plan:
      - aggregate:
          - get: platform-automation-image
            params:
              unpack: true
            passed:
              - upgrade-opsman
            trigger: false
          - get: platform-automation-tasks
            params:
              unpack: true
          - get: pas-product
          - get: configuration
          - get: variable

          - get: platform-automation-tasks-git #temporary
      - task: credhub-interpolate #temporary
        <<: *credhub-interpolate

      - task: upload-product
        image: platform-automation-image
        file: platform-automation-tasks/tasks/upload-product.yml
        input_mapping:
          product: pas-product
          env: configuration-interpolated
        params:
          ENV_FILE: ((foundation))/env/env.yml
      - task: stage-product
        image: platform-automation-image
        file: platform-automation-tasks/tasks/stage-product.yml
        input_mapping:
          product: pas-product
          env: configuration-interpolated
        params:
          ENV_FILE: ((foundation))/env/env.yml

  - name: configure-pas
    serial: true
    plan:
      - aggregate:
          - get: platform-automation-image
            params:
              unpack: true
            passed:
              - upload-and-stage-pas
            trigger: false
          - get: platform-automation-tasks
            params:
              unpack: true
          - get: configuration
          - get: variable

          - get: platform-automation-tasks-git #temporary
      - task: credhub-interpolate #temporary
        <<: *credhub-interpolate

      - task: configure-pas
        image: platform-automation-image
        file: platform-automation-tasks/tasks/configure-product.yml
        input_mapping:
          config: configuration-interpolated
          env: configuration-interpolated
          vars: variable
        params:
          CONFIG_FILE: ((foundation))/config/cf.yml
          VARS_FILES: vars/((foundation))/vars/cf-vars.yml
          ENV_FILE: ((foundation))/env/env.yml


  - name: upload-stemcells
    serial: true
    plan:
      - aggregate:
          - get: platform-automation-image
            params:
              unpack: true
            passed:
              - upgrade-opsman
            trigger: false
          - get: platform-automation-tasks
            params:
              unpack: true
          - get: pas-stemcell
            trigger: false
          - get: healthwatch-stemcell
            trigger: false
          - get: configuration
          - get: variable

          - get: platform-automation-tasks-git #temporary
      - task: credhub-interpolate #temporary
        <<: *credhub-interpolate

      - task: upload-pas-stemcell
        image: platform-automation-image
        file: platform-automation-tasks/tasks/upload-stemcell.yml
        input_mapping:
          env: configuration-interpolated
          stemcell: pas-stemcell
        params:
          ENV_FILE: ((foundation))/env/env.yml

      - task: upload-healthwatch-stemcell
        image: platform-automation-image
        file: platform-automation-tasks/tasks/upload-stemcell.yml
        input_mapping:
          env: configuration-interpolated
          stemcell: healthwatch-stemcell
        params:
          ENV_FILE: ((foundation))/env/env.yml

  - name: upload-and-stage-healthwatch
    serial: true
    plan:
      - aggregate:
          - get: platform-automation-image
            params:
              unpack: true
            trigger: false
          - get: platform-automation-tasks
            params:
              unpack: true
          - get: healthwatch-product
          - get: configuration
          - get: variable

          - get: platform-automation-tasks-git #temporary
      - task: credhub-interpolate #temporary
        <<: *credhub-interpolate

      - task: upload-and-stage-product
        image: platform-automation-image
        file: platform-automation-tasks/tasks/upload-and-stage-product.yml
        input_mapping:
          product: healthwatch-product
          env: configuration-interpolated
        params:
          ENV_FILE: ((foundation))/env/env.yml

  - name: configure-healthwatch
    serial: true
    plan:
      - aggregate:
          - get: platform-automation-image
            params:
              unpack: true
            passed:
              - upload-and-stage-healthwatch
            trigger: false
          - get: platform-automation-tasks
            params:
              unpack: true
          - get: configuration
          - get: variable

          - get: platform-automation-tasks-git #temporary
      - task: credhub-interpolate #temporary
        <<: *credhub-interpolate

      - task: configure-healthwatch
        image: platform-automation-image
        file: platform-automation-tasks/tasks/configure-product.yml
        input_mapping:
          config: configuration-interpolated
          env: configuration-interpolated
          vars: variable
        params:
          CONFIG_FILE: ((foundation))/config/healthwatch.yml
          ENV_FILE: ((foundation))/env/env.yml

  - name: apply-product-changes
    serial: true
    plan:
      - aggregate:
          - get: platform-automation-image
            params:
              unpack: true
            passed:
              - configure-healthwatch
              - configure-pas
            trigger: false
          - get: platform-automation-tasks
            params:
              unpack: true
          - get: configuration
          - get: variable

          - get: platform-automation-tasks-git #temporary
      - task: credhub-interpolate #temporary
        <<: *credhub-interpolate

      - task: apply-product-changes
        image: platform-automation-image
        file: platform-automation-tasks/tasks/apply-changes.yml
        input_mapping:
          env: configuration-interpolated
        params:
          ENV_FILE: ((foundation))/env/env.yml



  - name: staged-pas-config
    plan:
      - aggregate:
          - get: platform-automation-image
            params:
              unpack: true
          - get: platform-automation-tasks
            params:
              unpack: true
          - get: configuration
          - get: variable

          - get: platform-automation-tasks-git #temporary
      - task: credhub-interpolate #temporary
        <<: *credhub-interpolate

      - task: staged-config
        image: platform-automation-image
        file: platform-automation-tasks/tasks/staged-config.yml
        input_mapping:
          env: configuration-interpolated #interpolated-configuration
        params:
          PRODUCT_NAME: cf
          ENV_FILE: ((foundation))/env/env.yml
          SUBSTITUTE_CREDENTIALS_WITH_PLACEHOLDERS: false

        ensure: &make-state-commit
          do:
            - task: make-commit
              image: platform-automation-image
              file: platform-automation-tasks/tasks/make-git-commit.yml
              input_mapping:
                repository: configuration
                file-source: generated-config # from staged-config.yml
              output_mapping:
                repository-commit: configuration
              params:
                FILE_SOURCE_PATH: cf.yml # gen at stated-config.yml
                FILE_DESTINATION_PATH: ((foundation))/generated-config/cf-pcfdemo.net.yml # you can name it.
                GIT_AUTHOR_EMAIL: "pcf-pipeline-bot@example.com"
                GIT_AUTHOR_NAME: "Platform Automation Bot"
                COMMIT_MESSAGE: 'cf-pcfdemo.net.yml'
            - put: configuration
              params:
                repository: configuration
                merge: true

  - name: staged-healthwatch-config
    plan:
      - aggregate:
          - get: platform-automation-image
            params:
              unpack: true
          - get: platform-automation-tasks
            params:
              unpack: true
          - get: configuration
          - get: variable

          - get: platform-automation-tasks-git #temporary
      - task: credhub-interpolate #temporary
        <<: *credhub-interpolate

      - task: staged-config
        image: platform-automation-image
        file: platform-automation-tasks/tasks/staged-config.yml
        input_mapping:
          env: configuration-interpolated
        params:
          PRODUCT_NAME: p-healthwatch
          ENV_FILE: ((foundation))/env/env.yml
